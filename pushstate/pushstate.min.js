PushState={root:'/',set:a=>{var b=a.startsWith('/')?PushState.root:document.location.pathname+'/';history.pushState(null,null,b+PushState.clean(a))},get:()=>{return'/'+PushState.clean((document.location.pathname+'/').replace(PushState.root,''))},clean:a=>a.split('/').filter(b=>b).join('/'),event:(a,b=window)=>b.dispatchEvent(new CustomEvent('stateChange',{detail:{type:a},bubbles:!0})),match:(node,attr)=>{var regex='^/'+PushState.clean(node.getAttribute(attr))+'$';let match=new RegExp(regex).exec(PushState.get());node.hidden=!match;let callback=node.getAttribute('callback');match&&callback&&eval(callback)}},HEAR=window.addEventListener,HEAR('load',()=>PushState.event('init')),HEAR('click',a=>{var b=a.target.getAttribute('href');b&&(a.preventDefault(),PushState.set(b),PushState.event('link',a.target))}),HEAR('popstate',()=>PushState.event('history')),HEAR('stateChange',()=>{var b=PushState.get();Array.from(document.links).forEach(c=>{b==c.getAttribute('href')?c.classList.add('currentState'):c.classList.remove('currentState')})}),HEAR('stateChange',()=>{document.querySelectorAll('[on-state]').forEach(b=>PushState.match(b,'on-state'))}),window.customElements.define('push-state',class extends HTMLElement{connectedCallback(){HEAR('stateChange',()=>PushState.match(this,'match'))}});